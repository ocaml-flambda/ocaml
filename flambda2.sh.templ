#!/bin/bash

# parallelism
J=8
# Color for ocamlopt output
COLOR=auto
# number of errors lines to show from the log file
N=15
# tmpfile for logging command output
TMPFILE=$(mktemp /tmp/flambda2-build.XXXXXX)

# ##### WARNING !! ############################
# These 5 build directories should be distinct
# for the script to work correctly
# #############################################
# first stage build (branch hack_ocamltest on flambda repo)
FIRST_STAGE=
# second stage build (4.10 branch)
SECOND_STAGE=
# development repo (flambda2.0-stable branch)
DEV=
# final repo where the optimized compiler is built (flambda2.0-stable branch)
FINAL=
# empty/non-existing directory that the script will use to make a pseudo clone for tests
TESTS=

# ##############
# Check function
# ##############
# Check that all variables have been correctly set before trying to execute anything
check_aux () {
   if [ -z "$1" ]; then
     echo -e "\e[31mERROR !\e[0m variable $2 is empty"
     exit 1
   fi
}

check () {
  check_aux "${FIRST_STAGE}" "\$FIRST_STAGE"
  check_aux "${SECOND_STAGE}" "\$SECOND_STAGE"
  check_aux "${DEV}" "\$DEV"
  check_aux "${FINAL}" "\$FINAL"
}

# ##################
# Auxiliary function
# ##################
# Run a command in a directory and print some output message if it fails
# $1 : message to announce the beginning
# $2 : directory to cd into before running
# $3 : command to run inside of $2
wrap () {
  echo -ne "$1 ..."
  cd "$2" || (echo "folder $2 does not exists" && exit 2)
  if $3 &> "$TMPFILE"; then
    echo " done"
  else
    echo " failed !"
    echo -e "\e[31mERROR !\e[0m see full log file ${TMPFILE}, but here's an excerpt:"
    echo -e "\e[1m(DEV) $2 \$ $3\e[0m"
    tail -n ${N} "${TMPFILE}"
    exit 1
  fi
}


# ##################
# Cleaning functions
# ##################

clean_aux () {
  wrap "cleaning repo" "$1" "git clean -dfx"
}

clean_tmpfiles () {
  rm -rf /tmp/flambda2-build.*
}

clean_testdir () {
  rm -rf ${TESTS}
}

clean () {
  clean_tmpfiles
  clean_testdir
  clean_aux "${FIRST_STAGE}"
  clean_aux "${SECOND_STAGE}"
  clean_aux "${DEV}"
  clean_aux "${FINAL}"
}


# #########
# Configure
# #########

configure_aux () {
  wrap "configuring repo $1 with option $2" "$1" "./configure $2"
}

configure () {
  configure_aux "${FIRST_STAGE}" "--prefix=${FIRST_STAGE}/_install"
  configure_aux "${SECOND_STAGE}" "--prefix=${SECOND_STAGE}/_install"
  configure_aux "${DEV}" "--enable-flambda"
  configure_aux "${FINAL}" ""
}


# ###############
# Build functions
# ###############

base () {
  # Build first stage
  wrap "building first stage" "${FIRST_STAGE}" "make world.opt -j ${J}"
  wrap "installing first stage" "${FIRST_STAGE}" "make install"
  wrap "copying first stage make_opcodes and cvt_emit" "${FIRST_STAGE}" "cp tools/make_opcodes tools/cvt_emit _install/bin"

  # Build second stage
  wrap "building second stage" "${SECOND_STAGE}" "make world.opt -j ${J}"
  wrap "installing second stage" "${SECOND_STAGE}" "make install"
  wrap "copying second stage make_opcodes and cvt_emit" "${SECOND_STAGE}" "cp tools/make_opcodes tools/cvt_emit _install/bin"
}

# build the flambda2 compiler
flambda2 () {
  # Build the flambda2 compiler
  echo "setting up the env"
  export PATH=${FIRST_STAGE}/_install/bin/:$PATH
  wrap "building flambda2 compiler" "${DEV}" "dune build @world"
  wrap "overriding second stage ocamlopt with flambda2 compiler" "${DEV}" "cp _build/default/ocamlopt.opt ${SECOND_STAGE}/_install/bin"
}

# build the flambda2 stdlib
stdlib () {
  # Building the stdlib and std compiler with flambda2
  echo "setting up the env"
  export FLAMBDA2=y
  export OCAMLPARAM="_,flambda-invariants=0"
  export PATH=${SECOND_STAGE}/_install/bin/:$PATH
  wrap "building stdlib and compiler with flambda2" "${FINAL}" "dune build @world"
}

# #######
# Testing
# #######

ocamltest () {
  # compile ocamltest
  wrap "building first stage ocamltest.opt" "${FIRST_STAGE}" "make ocamltest.opt" "-j ${J}"

  wrap "setting up the test directory" "" "mkdir -p ${TESTS} ${TESTS}/runtime ${TESTS}/stdlib ${TESTS}/testsuite/tests ${TESTS}/testsuite/tools"
  wrap "copying ocamltest" "${TESTS}" "cp ${FIRST_STAGE}/ocamltest/ocamltest.opt ./"
  wrap "copying ocamltest summarize script" "${TESTS}" "cp ${FIRST_STAGE}/testsuite/summarize.awk ./testsuite/"
  wrap "copying the bytecode compile" "${TESTS}" "cp ${DEV}/_build/default/ocamlc.byte ./ocamlc"
  wrap "copying the native compiler" "${TESTS}" "cp ${DEV}/_build/default/ocamlopt.opt ./"
  wrap "copying the flambda2 enabled runtime" "${TESTS}" "cp -r ${DEV}/_build/default/runtime/* runtime/"
  wrap "copying the flambda2 compiled stdlib" "${TESTS}" "cp ${FINAL}/_build/default/stdlib/stdlib.* stdlib/"
  wrap "copying the flambda2 compiled stdlib artefacts (byte)" "${TESTS}" "cp ${FINAL}/_build/default/stdlib/.stdlib.objs/byte/* stdlib/"
  wrap "copying the flambda2 compiled stdlib artefacts (native)" "${TESTS}" "cp ${FINAL}/_build/default/stdlib/.stdlib.objs/native/* stdlib/"
  wrap "copying the testsuite (for convenience)" "${TESTS}" "cp -r ${DEV}/testsuite/tests/* ./testsuite/tests/"
  # create a dummy ocamlrun script
  echo -ne "creating dummy ocamlrun script ..."
  echo "#!/bin/bash" > ${TESTS}/runtime/ocamlrun
  echo "\"\$@\"" >> ${TESTS}/runtime/ocamlrun
  chmod +x ${TESTS}/runtime/ocamlrun
  echo "done"
}

test () {
  export OCAMLSRCDIR=${TESTS}
  echo -e "\e[1m(TESTS) ${TESTS} \$ ./ocamltest.opt ${*}\e[0m"
  cd ${TESTS} && ./ocamltest.opt "${@}"
}

test-dir () {
  # call ocamltest
  echo "Running tests from ${ROOT}/$1"
  export OCAMLSRCDIR=${TESTS}
  cd "${TESTS}" || (echo "folder ${TESTS} does not exist, please run ./flamdba2.sh ocamltest first" && exit 2)
  ./ocamltest.opt -list-tests "$1" | while read -r testfile; do
    ./ocamltest.opt "$1/$testfile" "${@:2}" | tee -a "${TMPFILE}"
  done
}

tests_aux () {
  cd "${TESTS}" || (echo "folder ${TESTS} does not exist, please run ./flambda2.sh ocamltest first" && exit 2)
  if ./ocamltest.opt -list-tests "$1" >/dev/null 2>&1; then
    test-dir "$1"
  else
    for dir in "$1"/*; do
      if [ -d "$dir" ]; then
        tests_aux "$dir" "${@:2}"
      fi
    done
  fi
}

tests () {
  case $1 in
    /*) DIR=$1;;
    *) DIR=$(pwd)/$1;;
  esac
  tests_aux "${DIR}" "${@:2}"
  awk -f testsuite/summarize.awk < "${TMPFILE}"
}

# #####################
# Compilation functions
# #####################

compile () {
  export FLAMBDA2=y
  export OCAML_COLOR=${COLOR}
  export OCAMLPARAM="_,flambda2-context-on-error=1"
  local COMP="${DEV}/_build/default/ocamlopt.opt"
  ${COMP} -cclib -lm -cclib -ldl -cclib ${DEV}/_build/default/runtime/libasmrun.a \
    -nopervasives -nostdlib -g "$@"
}

# compile with the flambda2 compiled stdlib
ocamlopt () {
  export FLAMBDA2=y
  export OCAML_COLOR=${COLOR}
  export OCAMLPARAM="_,flambda2-context-on-error=1"
  local COMP="${DEV}/_build/default/ocamlopt.opt"
  ${COMP} -cclib -lm -cclib -ldl -cclib ${DEV}/_build/default/runtime/libasmrun.a -nopervasives -nostdlib \
    -I ${FINAL}/_build/default/stdlib/.stdlib.objs/native \
    -I ${FINAL}/_build/default/stdlib/.stdlib.objs/byte \
    ${FINAL}/_build/default/stdlib/stdlib.cmxa \
    -open Stdlib -g "$@" \
    ${FINAL}/_build/default/stdlib/std_exit.cmx
}

# #################
# Main Control Flow
# #################

# First, check that variables have been set
check
# now switch on the main command argument
case "$1" in
  'clean' )
    clean
    ;;
  'clean_tmp' )
    clean_tmpfiles
    ;;
  'configure' )
    configure
    ;;
  'base' )
    base
    ;;
  'flambda2' )
    flambda2
    ;;
  'stdlib' )
    stdlib
    ;;
  'build' )
    base
    flambda2
    stdlib
    ;;
  'compile' )
    compile "${@:2}"
    ;;
  'ocamlopt' )
    ocamlopt "${@:2}"
    ;;
  'ocamltest' )
    ocamltest
    ;;
  'test' )
    test "${@:2}"
    ;;
  'tests' )
    tests "${@:2}"
    ;;
  'testsuite' )
    tests "${TESTS}/testsuite/tests" "${@:2}"
    ;;
  'help' )
    echo "usages:"
    echo "### Base commands"
    echo "./flambda2.sh clean                     : git clean -dfx all 4 git repositories"
    echo "./flambda2.sh configure                 : configure all 4 repositories with the correct options"
    echo "./flambda2.sh build                     : build everything"
    echo "./flambda2.sh testsuite                 : run the testsuite using the flambda2 enabled compiler"
    echo "### Advanced commands"
    echo "./flambda2.sh clean_tmp                 : clean the tmp files used for logs"
    echo "./flambda2.sh base                      : build the first and second stages"
    echo "./flambda2.sh flambda2                  : build the flambda2 compiler (and override second stage compiler)"
    echo "./flambda2.sh stdlib                    : build the stdlib (and compiler) with the flambda2 compiler"
    echo "./flamdba2.sh test [file] [args..]      : run ocamltest on a file to test the flambda2 enabled compiler"
    echo "./flambda2.sh tests [dir] [args..]      : run ocamltest on a directory (recursively) to test the flambda2 enabled compiler"
    echo "### Compile commands"
    echo "./flambda2.sh compile [file] [args..]   : compile the given file with the flambda2 compiler and no stdlib (assumes the flambda2 compiler has been built)"
    echo "./flambda2.sh ocamlopt [file] [args..]  : compile the given file with the flambda2 compiler and flambda2-built stdlib (assumes the compiler and stdlib have been build)"
    ;;
  *)
    echo "unknown command $1"
    echo "see ./flambda2.sh help"
    ;;
esac
# finally, cleanup the tmpfile
rm -rf "${TMPFILE}"


