let symbol CamlTests0__first_const16 = Block 0 () in
let code f_0 (param) my_closure -> k * k1 =
  (let prim = is_int 0 in
   let pflambda_isint = tag_imm prim in
   let untagged = untag_imm pflambda_isint in
   switch untagged
     | 0 -> k3
     | 1 -> k2)
    where k3 =
      let prim = get_tag 0 in
      let pgettag = tag_imm prim in
      let untagged = untag_imm pgettag in
      switch untagged
        | 0 -> k (1)
        | 1 -> k (2)
    where k2 =
      cont k (0)
in
(let f = closure f_0 @f in
 let pmakeblock = Block 0 (f) in
 cont k (pmakeblock))
  where k (module_block) =
    let field_0 = block_load 0 size 1 (module_block, 0) in
    let symbol CamlTests0 = Block 0 (field_0) in
    cont done (CamlTests0)
===>
let code f_0 (param) my_closure -> k * k1 = cont k (0) in
let symbol CamlTests0__f_1 = closure f_0 @f in
let symbol CamlTests0 = Block 0 (CamlTests0__f_1) in
cont done (CamlTests0)
